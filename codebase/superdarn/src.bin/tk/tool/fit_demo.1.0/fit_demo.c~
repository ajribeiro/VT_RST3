/* fit_demo.c
   ==========
*/


#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <string.h>
#include <time.h>
#include <zlib.h>

#include "rtypes.h"
#include "option.h"

#include "dmap.h"
#include "rprm.h"
#include "rawdata.h"
#include "fitblk.h"
#include "fitdata.h"
#include "radar.h"

#include "lmfit.h"
#include "fitacf.h"
#include "fitread.h"
#include "oldfitread.h"
#include "scandata.h"
#include "fitscan.h"
#include "oldfitscan.h"


#include "errstr.h"
#include "hlpstr.h"


/*********************************OVERVIEW********************************************
*
*	SuperDARN radar data is broken up into scans, usually 1 or 2 minutes in duration.
* A scan is broken up into some number of beams, usually 16+, numbered starting
* from 0.  The beams provide the azimuthal spatial coverage.  One "beam sounding"
* is when the radar sends out a signal along a certain azimuth, and waits for returns.
* the amount of time that the radar spends on that azimuth waiting for returns is
* called an integration period.  Each beam is broken up into some number of range gates,
* usually 75 or 100.  The range gates provide the radial spatial coverage.  Each
* range gate has a characteristic Dopper velocity, power, and Doppler spectral width.
*
*************************************************************************************/

/*radar operating parameter structure, 1 per beam sounding*/
struct RadarParm *prm;
/*fit data structure, 1 per beam sounding*/
struct FitData *fit;
/*radar scan structure, contains several beam soundings*/
struct RadarScan *scan;


struct RadarNetwork *network;
struct Radar *radar;
struct RadarSite *site;

struct OptionData opt;

int main(int argc,char *argv[])
{

  /* File format transistion
   * ------------------------
   *
   * When we switch to the new file format remove any reference
   * to "new". Change the command line option "new" to "old" and
   * remove "old=!new".
   */

	/*note about OLD and NEW:
	*
	* SuperDARN file formats changed on July 1, 2006.  Old file formats
	* are .dat (rawacf) and .fit (fitacf/fitex).  If you are processing a
	* file that is a .rawacf, .fitacf, or .fitex then you must invoke
	* the command line option -new.
	*/

	/*note about FITACF and FITEX
	*
	* fitacf is the standard superdarn fit file, processed with the
	* fitacf algorithm.  fitex is is the same format as fitacf, and can
	* be read/processed the same way, except the fitting was done
	* with the fitex2 algorithm, developed at VT.  Preliminary testing
	* has shown that this algorithm provides better results than then
	* the fitacf algorithm.
	*/


  unsigned char old=0;
  unsigned char new=0;

  char *envstr;
  int status;
  int arg,range,beam,i=0;
	int state=0;

  unsigned char help=0;
  unsigned char option=0;

  unsigned char vb=0;

  FILE *fitfp=NULL;
	FILE *fp=NULL;
  struct OldFitFp *oldfitfp=NULL;


	/*initialize the data structures*/
  prm=RadarParmMake();
  fit=FitMake();
	scan = RadarScanMake();

	/*process command line options*/
  OptionAdd(&opt,"-help",'x',&help);
  OptionAdd(&opt,"-option",'x',&option);
  OptionAdd(&opt,"vb",'x',&vb);
  OptionAdd(&opt,"new",'x',&new);
  arg=OptionProcess(1,argc,argv,&opt,NULL);
  old=!new;
  if (help==1)
	{
    OptionPrintInfo(stdout,hlpstr);
    exit(0);
  }
  if (option==1)
	{
    OptionDump(stdout,&opt);
    exit(0);
  }
  if ((old) && (argc-arg<2))
	{
    OptionPrintInfo(stdout,hlpstr);
    exit(-1);
  }

  /*read radar tables, load radar information, must always be done*/
  envstr=getenv("SD_RADAR");
  if (envstr==NULL)
	{
    fprintf(stderr,"Environment variable 'SD_RADAR' must be defined.\n");
    exit(-1);
  }

  fp=fopen(envstr,"r");

  if (fp==NULL)
	{
    fprintf(stderr,"Could not locate radar information file.\n");
    exit(-1);
  }
  network=RadarLoad(fp);
  fclose(fp);
  if (network==NULL)
	{
    fprintf(stderr,"Failed to read radar information.\n");
    exit(-1);
  }
  envstr=getenv("SD_HDWPATH");
  if (envstr==NULL)
	{
    fprintf(stderr,"Environment variable 'SD_HDWPATH' must be defined.\n");
    exit(-1);
  }
  RadarLoadHardware(envstr,network);

	/*now, lets actually read the fit file*/
	/*one way to read the fit file is a single beam record at a time, like so:*/
	/*old format files (.fit) have to be read like this*/
	if(old)
	{
		oldfitfp=OldFitOpen(argv[arg+1],NULL);
		if(oldfitfp==NULL)
		{
			fprintf(stderr,"File not found.  %s\n",argv[arg+1]);
			exit(-1);
		}
		status = OldFitRead(oldfitfp,prm,fit);
	}
	/*new format files (.fitacf/.fitex) have to be read like this*/
	else
	{
		fitfp=fopen(argv[arg],"r");
		if (fitfp==NULL)
		{
			fprintf(stderr,"File not found.  %s\n",argv[arg]);
      exit(-1);
    }
    status = FitFread(fitfp,prm,fit);
	}

	/*get time-specific radar information*/
	radar=RadarGetRadar(network,prm->stid);
  if (radar==NULL)
	{
    fprintf(stderr,"Failed to get radar information.\n");
    exit(-1);
  }
  site=RadarYMDHMSGetSite(radar,prm->time.yr,prm->time.mo,
												prm->time.dy,prm->time.hr,prm->time.mt,prm->time.sc);
	fprintf(stdout,"**********************************************************\n");
	fprintf(stdout,"First, we will read 10 fit data racords 1 record at a time\n");
	fprintf(stdout,"**********************************************************\n\n");
	/*fit files can be long, so we'll only read the first 10 records*/
	do
	{
		i++;
		/*now, lets examine some radar parameters*/
		/*the radar parameter structure is defined in rst/codebase/superdarn/src/lib/tk/radar.1.20/include/rprm.h*/
		fprintf(stdout,"Date: %d-%d-%d Time: %d:%d:%d Beam: %d\n",prm->time.yr,prm->time.mo,
	     prm->time.dy,prm->time.hr,prm->time.mt,prm->time.sc,prm->bmnum);

		fprintf(stdout,"Scan Flag (!= 0 indicates a new scan is starting) : %d\n",prm->scan);

		fprintf(stdout,"# of range gates : %d  Distance to First Range : %d km\n\n",prm->nrang,prm->lagfr);
		fprintf(stdout,"Range gates containing backscatter:\n");
		/*now, lets go through the range gates and look at the fit data*/
		/*the fit data structure is defined in rst/codebase/superdarn/src/lib/tk/fit.1.33/include/fitdata.h*/
		/*the fit range structure is defined in rst/codebase/superdarn/src/lib/tk/fitacf.2.4/include/fitblk.h*/
		for(range=0;range<prm->nrang;range++)
		{
			/*check quality flag to see if range gate contains backscatter*/
			if(fit->rng[range].qflg)
				fprintf(stdout,"Range Gate : %d  Lag 0 Power : %lf  Power : %lf dB  Velocity : %lf m/s  Spectral Width : %lf m/s\n",
								range,fit->rng[range].p_0,fit->rng[range].p_l,fit->rng[range].v,fit->rng[range].w_l);
		}

		fprintf(stdout,"END OF BEAM SOUNDING RECORD\n********************************************************\n\n");

		/*now, read the next record*/
		if(old)
			status = OldFitRead(oldfitfp,prm,fit);
		/*new format files (.fitacf/.fitex) have to be read like this*/
		else
			status = FitFread(fitfp,prm,fit);

	} while (i < 10);

	/*close the file pointer*/
  if(old)
		OldFitClose(oldfitfp);
	else
		fclose(fitfp);

	/*we have finished reading the fit file one record at a time,
	now lets try reading it into a scan structure, like so:*/
	/*we will only read the first 3 records*/

	fitfp=NULL;
  oldfitfp=NULL;

	i=0;

	/*old format files (.fit) have to be read like this*/
	if(old)
	{
		oldfitfp=OldFitOpen(argv[arg],NULL);
		if(oldfitfp==NULL)
		{
			fprintf(stderr,"File not found.\n");
			exit(-1);
		}
		status = OldFitReadRadarScan(oldfitfp,&state,scan,prm,fit,0,0,0);
	}
	/*new format files (.fitacf/.fitex) have to be read like this*/
	else
	{
		fitfp=fopen(argv[arg],"r");
		if (fitfp==NULL)
		{
			fprintf(stderr,"File not found.\n");
      exit(-1);
    }
    status = FitFreadRadarScan(fitfp,&state,scan,prm,fit,0,0,0);
	}

	/*get time-specific radar information*/
	radar=RadarGetRadar(network,prm->stid);
  if (radar==NULL)
	{
    fprintf(stderr,"Failed to get radar information.\n");
    exit(-1);
  }
  site=RadarYMDHMSGetSite(radar,prm->time.yr,prm->time.mo,
												prm->time.dy,prm->time.hr,prm->time.mt,prm->time.sc);

	fprintf(stdout,"************************************************\n");
	fprintf(stdout,"Now, we will read fit data into a scan structure\n");
	fprintf(stdout,"************************************************\n\n");
	/*fit files can be long, so we'll only read the first 10 records*/
	do
	{
		i++;
		/*now, lets examine some scan information*/
		/*the radar scan structure is defined in rst/codebase/superdarn/src/lib/tk/scan.1.6/include/scandata.h*/
		fprintf(stdout,"Radar Scan start time (epoch) : %lf\n",scan->st_time);
		fprintf(stdout,"Radar Scan end time (epoch) : %lf\n",scan->ed_time);
		fprintf(stdout,"Number of beams in scan : %d\n\n",scan->num);

		/*now, lets look at the individual beams*/
		for(beam=0;beam<scan->num;beam++)
		{
			fprintf(stdout,"Beam # : %d  # of range gates : %d  Distance to First Range : %d km\n",
											scan->bm[beam].bm,scan->bm[beam].nrang,scan->bm[beam].frang);
			fprintf(stdout,"Range gates containing backscatter:\n");
			/*now, lets go through the range gates and look at the fit data*/
			for(range=0;range<scan->bm[beam].nrang;range++)
			{
				/*check quality flag to see if range gate contains backscatter*/
				if(scan->bm[beam].sct[range])
					fprintf(stdout,"Range Gate : %d  Lag 0 Power : %lf  Power : %lf dB  Velocity : %lf m/s  Spectral Width : %lf m/s\n",
									range,scan->bm[beam].rng[range].p_0,scan->bm[beam].rng[range].p_l,scan->bm[beam].rng[range].v,scan->bm[beam].rng[range].w_l);
			}
		}

		fprintf(stdout,"END OF SCAN\n********************************************************\n\n");

		/*now, read the next record*/
		if(old)
			status = OldFitReadRadarScan(oldfitfp,&state,scan,prm,fit,0,0,0);
		/*new format files (.fitacf/.fitex) have to be read like this*/
		else
			status = FitFreadRadarScan(fitfp,&state,scan,prm,fit,0,0,0);

	} while (i < 3);



	return 0;
}

