<?xml version="1.0" encoding="ISO-8859-1"?>

<library>
<project>base</project>
<name>rps</name>
<location>src.lib/graphic/ps</location>
<function>
<name>PostScriptBezier</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax>int PostScriptBezier(<sn href="structPostScript.html">struct PostScript</sn> *ptr, float x1,float y1,float x2,float y2,float x3,float y3, float x4,float y4, unsigned int color,float width, <sn href="structPostScriptDash.html">struct PostScriptDash</sn> *dash,<sn href="structPostScriptClip.html">struct PostScriptClip</sn> *clip);</syntax>

<description><p>The <fn href="PostScriptBezier.html">PostScriptBezier</fn> function plots a bezier curve.</p>
<p>The argument <ar>ptr</ar> is a pointer to the <code>PostScript</code> control structure.</p> 
<p>The coordinates of the four points that define the bezier curve are given by the arguments
<ar>x1</ar>, <ar>y1</ar>,<ar>x2</ar>, <ar>y2</ar>,<ar>x2</ar>, <ar>y3</ar>, and <ar>x4</ar>, <ar>y4</ar>. The two end points are defined by <ar>x1</ar>, <ar>y1</ar> and <ar>x4</ar>,<ar>y4</ar>. The other two coordinates are the control points.</p>

<p>The color used to plot the curve is given by the <ar>color</ar> which is a 24-bit number that represents the red,green and blue components of the color as 8-bit numbers. The red channel occupies the most significant bits and the blue channel occupies the least significant bits.</p>
<p>The width of the line used to plot the curve is controlled using the argument <ar>width</ar>, a value of zero will plot a hairline. The dot-dash pattern is given by <ar>dash</ar>. If this is set to a <code>NULL</code> pointer, a solid line is plotted.</p>
<p>The clipping polygon is given by the argument <ar>clip</ar>. If this is set to a <code>NULL</code> pointer, no clipping is performed.</p>

</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="postscript">PostScriptBezier</example>
<example type="source">PostScriptBezier.c</example>


</function>

<function>
<name>PostScriptColor</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax>unsigned int PostScriptColor(int r,int g,int b);</syntax>

<description><p>The <fn href="PostScriptColor.html">PostScriptColor</fn> function creates an integer representation of a color.</p>
<p>The red, green, and blue component of the color are given by the arguments <ar>r</ar>, <ar>g</ar>, and <ar>b</ar>. The values of these arguments range from zero to (255).</p>
</description>
<returns>Returns an integer representation of the color on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="postscript">PostScriptColor</example>
<example type="source">PostScriptColor.c</example>


</function>
<function>
<name>PostScriptEllipse</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax>int PostScriptEllipse(<sn href="structPostScript.html">struct PostScript</sn> *ptr, <sn href="structPostScriptMatrix.html">struct PostScriptMatrix</sn> *matrix, float x,float y,float w,float h, int fill,unsigned int color, float width, <sn href="structPostScriptDash.html">struct PostScriptDash</sn> *dash,<sn href="structPostScriptClip.html">struct PostScriptClip</sn> *clip);</syntax>

<description><p>The <fn href="PostScriptEllipse.html">PostScriptEllipse</fn> function plots an ellipse.</p>
<p>The argument <ar>ptr</ar> is a pointer to the <code>PostScript</code> control structure. The argument <ar>matrix</ar> is an optional transformation matrix that can be applied to the ellipse. If this is set to a <code>NULL</code> pointer then no transformation is applied. The position of the center of the ellipse is given by the arguments <ar>x</ar>, and <ar>y</ar>. The horizontal and vertical radii are given by the arguments <ar>w</ar> and <ar>h</ar>.</p>
<p>If the argument <ar>fill</ar> is set to a non-zero value then the ellipse will be plotted as a solid shape, not an outline.</p>
<p>The color used to plot the rectangle is given by the <ar>color</ar> which is a 24-bit number that represents the red,green and blue components of the color as 8-bit number. The red channel occupies the most significant bits and the blue channel occupies the least significant bits.</p>
<p>The width of the line used to plot the ellipse is controlled using the argument <ar>width</ar>, a value of zero will plot a hairline. The dot-dash pattern used to plot the ellipse is given by <ar>dash</ar>. If this is set to a <code>NULL</code> pointer, a solid line is plotted.</p>
<p>The clipping polygon is given by the argument <ar>clip</ar>. If this is set to a <code>NULL</code> pointer, no clipping is performed.</p>


</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="postscript">PostScriptEllipse</example>
<example type="source">PostScriptEllipse.c</example>


</function>


<function>
<name>PostScriptEndDocument</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax>int PostScriptEndDocument(<sn href="structPostScript.html">struct PostScript</sn> *ptr);</syntax>

<description><p>The <fn href="PostScriptEndDocument.html">PostScriptEndDocument</fn> function ends an PostScript document. No further plotting can take place once this function is called</p>
<p>The argument <ar>ptr</ar> is a pointer to the PostScript control structure.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="postscript">PostScriptEndDocument</example>
<example type="source">PostScriptEndDocument.c</example>


</function>

<function>
<name>PostScriptEndPlot</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax>int PostScriptEndPlot(<sn href="structPostScript.html">struct PostScript</sn> *ptr);</syntax>

<description><p>The <fn href="PostScriptEndPlot.html">PostScriptEndPlot</fn> function ends a PostScript plot by closing the page. Plotting can be continued on a new page by called <fn href="PostScriptMakePlot.html">PostScriptMakePlot</fn></p>
<p>The argument <ar>ptr</ar> is a pointer to the PostScript control structure.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="postscript">PostScriptEndPlot</example>
<example type="source">PostScriptEndPlot.c</example>


</function>
<function>
<name>PostScriptFree</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax>void PostScriptFree(<sn href="structPostScript.html">struct PostScript</sn> *ptr);</syntax>

<description><p>The <fn href="PostScriptFree.html">PostScriptFree</fn> function releases memory allocated for an PostScript control structure.</p>
<p>The argument ptr is a pointer to the PostScript control structure.</p>
</description>

<example type="postscript">PostScriptFree</example>
<example type="source">PostScriptFree.c</example>


</function>
<function>
<name>PostScriptFreeClip</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax>void PostScriptFreeClip(<sn href="structPostScriptClip.html">struct PostScriptClip</sn> *ptr);</syntax>

<description><p>The <fn href="PostScriptFreeClip.html">PostScriptFreeClip</fn> function releases memory allocated for an PostScript clipping polygon.</p>
<p>The argument <ar>ptr</ar> is a pointer to the PostScript clipping polygon.</p>
</description>

<example type="postscript">PostScriptFreeClip</example>
<example type="source">PostScriptFreeClip.c</example>


</function>
<function>
<name>PostScriptFreeDash</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax>void PostScriptFreeDash(<sn href="structPostScriptDash.html">struct PostScriptDash</sn> *ptr);</syntax>

<description><p>The <fn href="PostScriptFreeDash.html">PostScriptFreeDash</fn> function releases memory allocated for an PostScript dash pattern.</p>
<p>The argument <ar>ptr</ar> is a pointer to the PostScript dash pattern.</p>
</description>

<example type="postscript">PostScriptFreeDash</example>
<example type="source">PostScriptFreeDash.c</example>


</function>
<function>
<name>PostScriptImage</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax>int PostScriptImage(<sn href="structPostScript.html">struct PostScript</sn> *ptr, <sn href="structPostScriptMatrix.html">struct PostScriptMatrix</sn> *matrix,<sn href="struct&root;/src.lib/graphic/fbuffer/FrameBuffer.html">struct FrameBuffer</sn> *img, unsigned char mask, float x,float y, <sn href="structPostScriptClip.html">struct PostScriptClip</sn> *clip);</syntax>


<description><p>The <fn href="PostScriptImage.html">PostScriptImage</fn> function plots a bitmap image.</p>
<p>The argument <ar>ptr</ar> is a pointer to the PostScript control structure. The argument <ar>matrix</ar> is an optional transformation matrix that can be applied to the bitmap. If this is set to a <code>NULL</code> pointer then no transformation is applied.</p>
<p>The bitmap image is pointed to by the argument <ar>img</ar>.</p>
<p>The argument <ar>mask</ar> defines which color channels are active. Setting this argument to (0x0f) will output the color to all four channels. The most significant bit controls the alpha channel and the least significant bit controls the blue channel.</p>
<p>The position of the top-left hand corner of the bitmap is given by the arguments <ar>x</ar>, and <ar>y</ar>.</p>
<p>The clipping polygon is given by the argument <ar>clip</ar>. If this is set to a <code>NULL</code> pointer, no clipping is performed.</p>  
</description>

<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="postscript">PostScriptImage</example>
<example type="source">PostScriptImage.c</example>


</function>
<function>
<name>PostScriptLine</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax>int PostScriptLine(<sn href="structPostScript.html">struct PostScript</sn> *ptr, float ax,float ay,float bx,float by, unsigned int color,float width, <sn href="structPostScriptDash.html">struct PostScriptDash</sn> *dash, <sn href="structPostScriptClip.html">struct PostScriptClip</sn> *clip);</syntax>

<description><p>The <fn href="PostScriptLine.html">PostScriptLine</fn> function plots a straight line segment.</p>
<p>The argument <ar>ptr</ar> is a pointer to the PostScript control structure.</p> 
<p>The coordinates of the two points that define the line are given by the arguments <ar>ax</ar>, <ar>ay</ar>, and <ar>bx</ar>, <ar>by</ar>.</p>
<p>The color used to plot the line is given by the <ar>color</ar> which is a 24-bit number that represents the alpha,red,green and blue components of the color as 8-bit numbers. The alpha channel occupies the most significant bits and the blue channel occupies the least significant bits.</p>
<p>The width of the line is controlled using the argument <ar>width</ar>, a value of zero will plot a hairline. The dot-dash pattern is given by <ar>dash</ar>. If this is set to a <code>NULL</code> pointer, a solid line is plotted.</p>
<p>The clipping polygon is given by the argument <ar>clip</ar>. If this is set to a <code>NULL</code> pointer, no clipping is performed.</p>  
</description>

<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="postscript">PostScriptLine</example>
<example type="source">PostScriptLine.c</example>


</function>
<function>
<name>PostScriptMake</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax><sn href="structPostScript.html">struct PostScript</sn> *PostScriptMake();</syntax>

<description><p>The <fn href="PostScriptMake.html">PostScriptMake</fn> function initializes an  PostScript control structure.</p>
</description>
<returns>Returns a pointer to the control structure on success. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>

<example type="postscript">PostScriptMake</example>
<example type="source">PostScriptMake.c</example>


</function>
<function>
<name>PostScriptMakeClip</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax><sn href="structPostScriptClip.html">struct PostScriptClip</sn> *PostScriptMakeClip(float x,float y,float wdt, float hgt,  int num,float *px, float *py,int *t);</syntax>


<description><p>The <fn href="PostScriptMakeClip.html">PostScriptMakeClip</fn> function creates a clipping polygon.</p>
<p>The arguments <ar>x</ar> and <ar>y</ar> are applied as an offset to each vertex in the clipping polygon. The polygon is expected to lie with the rectangle whose size is given by the arguments <ar>wdt</ar> and <ar>hgt</ar>.</p>
<p>The number of vertices of the clipping polygon is given by the argument <ar>num</ar>. The arrays containing the X and Y coordinates of each vertex are pointed to by the arguments <ar>px</ar> and <ar>y</ar>.</p>
<p>A polygon can be constructed from straight line segments or bezier curves. The array pointed to by the argument <ar>t</ar> determines what kind of line segment is used to join to a vertex. If the corresponding entry in the array equals zero, then the segment between the current point and the next point is a straight line; if the entry is (1) then the connecting segment is a bezier curve and the next two vertices are the control points, the curve connects to the third point.</p> 
</description>

<returns>Returns a pointer to the structure containing the clipping polygon on success. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>

<example type="postscript">PostScriptMakeClip</example>
<example type="source">PostScriptMakeClip.c</example>


</function>
<function>
<name>PostScriptMakeDash</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax><sn href="structPostScriptDash.html">struct PostScriptDash</sn> *PostScriptMakeDash(float *p,float phase,int sze);</syntax>

<description><p>The <fn href="PostScriptMakeDash.html">PostScriptMakeDash</fn> function makes a dash pattern for an PostScript plot.</p>
<p>The array pointed to by the argument <ar>p</ar> is interpreted as distances along the line that alternately specify dashes and gaps. The argument <ar>sze</ar> give the number of elements in the array.</p>
<p>When a dashed line is plotted an element is read from the array and a dash of length equal to that value is drawn. A gap equal to the value of the next element is then left and the process is repeated until the end of the line is reached, cycling through the array as necessary.</p>
<p>The argument <ar>phase</ar> specifies the initial element to use from the array.</p>
</description>
<returns>Returns a pointer to the dash structure on success. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>

<example type="postscript">PostScriptMakeDash</example>
<example type="source">PostScriptMakeDash.c</example>


</function>
<function>
<name>PostScriptMakeDashString</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax><sn href="structPostScriptDash.html">struct PostScriptDash</sn> *PostScriptMakeDashString(char *str);</syntax>


<description><p>The <fn href="PostScriptMakeDashString.html">PostScriptMakeDashString</fn> function makes a dash pattern for an PostScript plot from a text string.</p>
<p>The argument <ar>str</ar> is the zero terminated string of space separated numbers that defines the dash pattern.</p>
<p>The first number in the string is a phase offset. The subsequent numbers are interpreted as distances along the line that alternately specify dashes and gaps.</p>
<p>When a dashed line is plotted an element is read from the array and a dash of length equal to that value is drawn. A gap equal to the value of the next element is then left and the process is repeated until the end of the line is reached, cycling through the array as necessary.</p>
<p>The phase specifies the initial element to use from the array.</p>
</description>

<returns>Returns a pointer to the dash structure on success. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>

<example type="postscript">PostScriptMakeDashString</example>
<example type="source">PostScriptMakeDashString.c</example>


</function>



<function>
<name>PostScriptMakeDocument</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax>int PostScriptMakePlot(<sn href="structPostScript.html">struct PostScript</sn> *ptr, float x,float y,float wdt,float hgt, int land);</syntax>


<description><p>The <fn href="PostScriptMakeDocument.html">PostScriptMakeDocument</fn> function creates a PostScript document.</p>
<p>The offset from the edge of the page is given by the arguments <ar>x</ar> and <ar>y</ar>. The size of the plot is given by the arguments <ar>wdt</ar> and <ar>hgt</ar>.</p>
<p>If the argument <ar>land</ar> has a non-zero value then the PostScript plot is rotated ninety degrees to form a landscape plot.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="postscript">PostScriptMakeDocument</example>
<example type="source">PostScriptMakeDocument.c</example>


</function>


<function>
<name>PostScriptMakePlot</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax>int PostScriptMakePlot(<sn href="structPostScript.html">struct PostScript</sn> *ptr);</syntax>


<description><p>The <fn href="PostScriptMakePlot.html">PostScriptMakePlot</fn> function creates a PostScript plot by starting a new page.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="postscript">PostScriptMakePlot</example>
<example type="source">PostScriptMakePlot.c</example>


</function>
<function>
<name>PostScriptMatrixString</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax><sn href="structPostScriptMatrix.html">struct PostScriptMatrix</sn> *PostScriptMatrixString(char *str);</syntax>

<description><p>The <fn href="PostScriptMatrixString.html">PostScriptMatrixString</fn> function creates a transformation matrix from a text string.</p>
<p>The argument <ar>str</ar> is the zero terminated string of space separated numbers that defines the matrix. The first number gives the top-left value, the second, the top-right value, the third, the bottom-left value, and the fourth gives the bottom right value.</p>
</description>
<returns>Returns a pointer to the matrix structure on success. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>

<example type="postscript">PostScriptMatrixString</example>
<example type="source">PostScriptMatrixString.c</example>


</function>

<function>
<name>PostScriptPolygon</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax>int PostScriptPolygon(<sn href="structPostScript.html">struct PostScript</sn> *ptr, <sn href="structPostScriptMatrix.html">struct PostScriptMatrix</sn> *matrix, float x,float y, int num,float *px,float *py,int *t,int fill, unsigned int color,float width, <sn href="structPostScriptDash.html">struct PostScriptDash</sn> *dash,<sn href="structPostScriptClip.html">struct PostScriptClip</sn> *clip);</syntax>


<description><p>The <fn href="PostScriptPolygon.html">PosctScriptPolygon</fn> function plots a polygon.</p>
<p>The argument <ar>ptr</ar> is a pointer to the PostScript control structure . The argument <ar>matrix</ar> is an optional transformation matrix that can be applied to the polygon. If this is set to a <code>NULL</code> pointer then no transformation is applied. The position at which the polygon is plotted is given by the arguments <ar>x</ar>, and <ar>y</ar>.</p>
<p>The number of vertices of the polygon is given by the argument <ar>num</ar>. The arrays containing the X and Y coordinates of each vertex are pointed to by the arguments <ar>x</ar> and <ar>y</ar>.</p>
<p>A polygon can be constructed from straight line segments or bezier curves. The array pointed to by the argument <ar>t</ar> determines what kind of line segment is used to join to a vertex. If the corresponding entry in the array equals zero, then the segment between the current point and the next point is a straight line; if the entry is (1) then the connecting segment is a bezier curve and the next two vertices are the control points, the curve connects to the third point.</p> 
<p>If the argument <ar>fill</ar> is set to a non-zero value then the polygon will be plotted as solid shape, not an outline.</p>
<p>The color used to plot the polygon is given by the <ar>color</ar> which is a 24-bit number that represents the red,green and blue components of the color as 8-bit number. The alpha red occupies the most significant bits and the blue channel occupies the least significant bits.</p>
<p>The width of the line used to plot the polygon is controlled using the argument <ar>width</ar>, a value of zero will plot a hairline. The dot-dash pattern used to plot the polygon is given by <ar>dash</ar>. If this is set to a <code>NULL</code> pointer, a solid line is plotted.</p>
<p>The clipping polygon is given by the argument <ar>clip</ar>. If this is set to a <code>NULL</code> pointer, no clipping is performed.</p>  
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>Returns zero on success. On error, (-1) is returned.</errors>

<example type="postscript">PostScriptPolygon</example>
<example type="source">PostScriptPolygon.c</example>


</function>
<function>
<name>PostScriptRectangle</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax>int PostScriptRectangle(<sn href="structPostScript.html">struct PostScript</sn> *ptr, <sn href="structPostScriptMatrix.html">struct PostScriptMatrix</sn> *matrix, float x,float y,float w,float h,int fill,unsigned int color, float width, <sn href="structPostScriptDash.html">struct PostScriptDash</sn> *dash,<sn href="structPostScriptClip.html">struct PostScriptClip</sn> *clip);</syntax>

<description><p>The <fn href="PostScriptRectangle.html">PostScriptRectangle</fn> function plots a rectangle.</p>
<p>The argument <ar>ptr</ar> is a pointer to the PostScript control structure. The argument <ar>matrix</ar> is an optional transformation matrix that can be applied to the rectangle. If this is set to a <code>NULL</code> pointer then no transformation is applied. The position at which the rectangle is plotted is given by the arguments <ar>x</ar>, and <ar>y</ar>. The width and height of the rectangle are given by the arguments <ar>w</ar> and <ar>h</ar>.</p>
<p>If the argument <ar>fill</ar> is set to a non-zero value then the rectangle will be plotted as a solid shape, not an outline.</p>
<p>The color used to plot the rectangle is given by the <ar>color</ar> which is a 24-bit number that represents the red,green and blue components of the color as 8-bit number. The red channel occupies the most significant bits and the blue channel occupies the least significant bits. </p>
<p>The width of the line used to plot the rectangle is controlled using the argument <ar>width</ar>, a value of zero will plot a hairline. The dot-dash pattern used to plot the rectangle is given by <ar>dash</ar>. If this is set to a <code>NULL</code> pointer, a solid line is plotted.</p>
<p>The clipping polygon is given by the argument <ar>clip</ar>. If this is set to a <code>NULL</code> pointer, no clipping is performed.</p>  
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>Returns zero on success. On error, (-1) is returned.</errors>

<example type="postscript">PostScriptRectangle</example>
<example type="source">PostScriptRectangle.c</example>




</function>
<function>
<name>PostScriptRotateMatrix</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax>int PostScriptRotateMatrix(<sn href="structPostScriptMatrix.html">struct PostScriptMatrix</sn> *ptr, float angle);</syntax>

<description><p>The <fn href="PostScriptRotateMatrix.html">PostScriptRotateMatrix</fn> function rotates a transformation matrix.</p>
<p>The matrix to rotate is pointed to by the argument  <ar>ptr</ar>. The angle in degrees to rotate the matrix is given by the argument <ar>angle</ar>.</p>
</description>


<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="postscript">PostScriptRotateMatrix</example>
<example type="source">PostScriptRotateMatrix.c</example>


</function>
<function>
<name>PostScriptScaleMatrix</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax>int PostScriptScaleMatrix(<sn href="structPostScriptScaleMatrix.html">struct PostScriptScaleMatrix</sn> *ptr, float xscale,float yscale);</syntax>


<description><p>The <fn href="PostScriptRotateMatrix.html">PostScriptRotateMatrix</fn> function scales a transformation matrix.</p>
<p>The matrix to scale is pointed to by the argument  <ar>ptr</ar>. The X and Y scale factors are given by the arguments <ar>xscale</ar> and <ar>yscale</ar>.</p>
</description>


<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="postscript">PostScriptScaleMatrix</example>
<example type="source">PostScriptScaleMatrix.c</example>


</function>
<function>
<name>PostScriptSetText</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax>int PostScriptSetText(<sn href="structPostScript.html">struct PostScript</sn> *ptr, int (*text)(char *,int,void *),void *data);</syntax>


<description><p>The <fn href="PostScriptSetText.html">PostScriptSetText</fn> function sets the text stream handler in the  <code>PostScript</code> control structure.</p>
<p>The argument <ar>ptr</ar> is a pointer to the PostScript control structure.</p>
<p>The argument <ar>text</ar> is a pointer to a function of the form:</p>
<fd>
int (*text) (char *buffer,int size,void *dptr);
</fd>
<p>This function is called each time PostScript commands are sent to the text stream.</p>
<p>The argument <ar>buffer</ar> is a pointer to a buffer containing the text of the command and the argument <ar>size</ar> indicates the size of the buffer.</p>
<p>The <ar>data</ar> argument of the <fn href="PostScriptSetText.html">PostScriptSetText</fn> function  is passed directly as the <ar>dptr</ar> argument and allows extra parameters to be passed to the function.</p>

<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>


<example type="postscript">PostScriptSetText</example>
<example type="source">PostScriptSetText.c</example>


</description>



</function>

<function>
<name>PostScriptText</name>
<location>src.lib/graphic/ps</location>
<header>base/rps.h</header>
<syntax>int PostScriptText(<sn href="structPostScript.html">struct PostScript</sn> *ptr, <sn href="structPostScriptMatrix.html">struct PostScriptMatrix</sn> *matrix, char *fname,float fsize, float x,float y,int num,char *txt, unsigned int color, <sn href="structPostScriptClip.html">struct PostScriptClip</sn> *clip);</syntax>



<description><p>The <fn href="PostScriptText.html">PostScriptText</fn> function plots text.</p>
<p>The argument <ar>ptr</ar> is a pointer to the PostScript control structure. The argument <ar>matrix</ar> is an optional transformation matrix that can be applied to the rectangle. If this is set to a <code>NULL</code> pointer then no transformation is applied.</p>
<p>The zero terminated string pointed to by the argument <ar>fname</ar> gives thhe name of the font. The size of the font is given by the argument <ar>fsize</ar>.</p>
<p>The position at which the text is plotted is given by the arguments <ar>x</ar>, and <ar>y</ar>.</p>
<p>The number of character to plot is given by the argument <ar>num</ar>, and the characters are taken from the array pointed to by the argument <ar>txt</ar>.</p>
<p>The color used to plot the text is given by the <ar>color</ar> which is a 24-bit number that represents the red,green and blue components of the color as 8-bit number. The red channel occupies the most significant bits and the blue channel occupies the least significant bits.</p>
<p>The clipping polygon is given by the argument <ar>clip</ar>. If this is set to a <code>NULL</code> pointer, no clipping is performed.</p>  
</description>

<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>

<example type="postscript">PostScriptText</example>
<example type="source">PostScriptText.c</example>


</function>


<structure>
 <name>PostScript</name>
 <location>src.lib/graphic/ps</location>
 <header>base/rps.h</header>
 <struct>
    <member>
      <proto>int cnt;</proto>
      <description>Counter indicating the number of strokes in the current path.</description>
    </member>
    <member>
      <proto>float x;</proto>
      <description>Offset from left edge of the page.</description>
    </member>
    <member>
      <proto>float y;</proto>
      <description>Offset from the top of the page.</description>
    </member>
    <member>
      <proto>float wdt;</proto>
      <description>Width of the plot.</description>
    </member>
    <member>
      <proto>float hgt;</proto>
      <description>Height of the plot.</description>
    </member>
    <member>
      <proto>int land;</proto>
      <description>Flag indicating whether the plot is landscape or portrait. A non-zero value indicates landscape</description>
    </member>
    <member>
      <proto>int pagenum;</proto>
      <description>Page number.</description>
    </member>
    <member>
      <proto>float width;</proto>
      <description>Width of the current stroke.</description>
    </member>
    <member>
      <proto>unsigned int color;</proto>
      <description>Color of the current stroke.</description>
    </member>
    <member>
      <proto><sn href="structPostScriptDash.html">struct PostScriptDash</sn> *dash;</proto>
      <description>Dash pattern of the current stroke.</description>
    </member>
    <member>
      <proto><sn href="structPostScriptClip.html">struct PostScriptClip</sn> *clip;</proto>
      <description>Clipping polygon of the current stroke.</description>
    </member>
    <member>
      <proto>float px;</proto>
      <description>X coordinate of the current stroke.</description>
    </member>
    <member>
      <proto>float py;</proto>
      <description>Y coordinate of the current stroke.</description>
    </member>
    <member>
      <struct>
         <member>
           <proto>int (*user)(char *buf,int sze,void *data);</proto>
           <description>Function called to handle the text stream.</description>
         </member>
         <member>
           <proto>void *data;</proto>
           <description>Pointer to a block of memory passed as the last argument to the text stream handler.</description>
         </member>
       </struct>
       <proto>text;</proto>
       <description>Text stream handler.</description>
    </member>
  </struct>

<description>
<p>The <sn href="structPostScript.html">struct PostScript</sn> structure stores a control structure for an PostScript plot.</p>
</description>

</structure>


<structure>
 <name>PostScriptClip</name>
 <location>src.lib/graphic/ps</location>
 <header>base/rps.h</header>
 <struct>
    <member>
      <proto>int num;</proto>
      <description>Number of vertices in the clipping polygon.</description>
    </member>
    <member>
      <proto>float *px;</proto>
      <description>Pointer to an array containing the X coordinate of each vertex.</description>
    </member>
    <member>
      <proto>float *py;</proto>
      <description>Pointer to an array containing the Y coordinate of each vertex.</description>
    </member>
    <member>
      <proto>int *t;</proto>
      <description>Pointer to an array containing the type proto for the line segment joined to each vertex.</description>
    </member>
 </struct>

<description>
<p>The <sn href="structPostScriptClip.html">struct PostScriptClip</sn> structure stores a clipping polygon for an PostScript plot.</p>
</description>


</structure>

<structure>
 <name>PostScriptDash</name>
 <location>src.lib/graphic/ps</location>
 <header>base/rps.h</header>
 <struct>
    <member>
      <proto>float *p;</proto>
      <description>Pointer to an array of line segment lengths.</description>
    </member>
    <member>
      <proto>int sze;</proto>
      <description>Number of entries in the array of line segment lengths.</description>
    </member>
    <member>
      <proto>float phase;</proto>
      <description>Current position in the array of line segment lengths.</description>
    </member>
 </struct>

<description>
<p>The <sn href="structPostScriptDash.html">struct PostScriptDash</sn> structure stores a dash pattern for an PostScript plot.</p>
</description>


</structure>

<structure>
 <name>PostScriptMatrix</name>
 <location>src.lib/graphic/ps</location>
 <header>base/rps.h</header>
 <struct>
    <member>
      <proto>float a;</proto>
      <description>Top-left matrix cell.</description>
    </member>
    <member>
      <proto>float b;</proto>
      <description>Top-right matrix cell.</description>
    </member>
    <member>
      <proto>float c;</proto>
      <description>Bottom-left matrix cell.</description>
    </member>
    <member>
      <proto>float d;</proto>
      <description>Bottom-right matrix cell.</description>
    </member>
  </struct>

<description>
<p>The <sn href="structPostScriptMatrix.html">struct PostScriptMatrix</sn> structure stores a transformation matrix for an PostScript plot.</p>
</description>



</structure>


</library>
