<?xml version="1.0" encoding="ISO-8859-1"?>
<library>
<project>general</project>
<name>poly</name>
<location>src.lib/polygon</location>
<function>
<name>PolygonAdd</name>
<location>src.lib/math/polygon</location>
<header>general/polygon.h</header>
<syntax>int PolygonAdd(<sn href="structPolygonData.html">struct PolygonData</sn> *a,void *pnt,int op);</syntax>
<description><p>The <fn href="PolygonAdd.html">PolygonAdd</fn> function adds a vertex to a polygon.</p>
<p>The argument <ar>a</ar> points to the polygon structure to add the vertex to. The coordinates of the vertex to add to the polygon are pointed to by the argument <ar>pnt</ar>. The final argument <ar>op</ar> indicates the kind of drawing operation to associate with the line segment between this vertex and the preceding one. A value of zero indicates that the line segment should be drawn, a non-zero value indicates this segment is a move operation.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="rplot">PolygonAdd</example>
<example type="source">PolygonAdd.c</example>
</function>
<function>
<name>PolygonAddPolygon</name>
<location>src.lib/math/polygon</location>
<header>general/polygon.h</header>
<syntax>int PolygonAddPolygon(<sn href="structPolygonData.html">struct PolygonData</sn> *a,int type);</syntax>
<description><p>The <fn href="PolygonAddPolygon.html">PolygonAddPolygon</fn> function starts a new polygon in a polygon group.</p>
<p>The argument <ar>a</ar> points to the polygon structure to add the polygon to. The polygon is assigned a type code given by the argument <ar>type</ar>.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error, (-1) is returned.</errors>
<example type="rplot">PolygonAddPolygon</example>
<example type="source">PolygonAddPolygon.c</example>

</function>
<function>
<name>PolygonClip</name>
<location>src.lib/math/polygon</location>
<header>general/polygon.h</header>
<syntax><sn href="structPolygonData.html">struct PolygonData</sn> *PolygonClip(<sn href="structPolygonData.html">struct PolygonData</sn> *apol, <sn href="structPolygonData.html">struct PolygonData</sn> *bpol);</syntax>
<description><p>The <fn href="PolygonClip.html">PolygonClip</fn> function applies a clipping volume to a polygon group.</p>
<p>The polygon group to clip is pointed to by the argument <ar>apol</ar>, the clipping polygon is pointed to by <ar>bpol</ar>.</p>
</description>
<returns>Returns a pointer to the new polygon group generated by applying the clip on success. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>
<example type="rplot">PolygonClip</example>
<example type="source">PolygonClip.c</example>

</function>
<function>
<name>PolygonCopy</name>
<location>src.lib/polygon</location>
<header>general/polygon.h</header>
<syntax><sn href="structPolygonData.html">struct PolygonData</sn> *PolygonCopy(<sn href="structPolygonData.html">struct PolygonData</sn> *src);</syntax>
<description><p>The <fn href="PolygonCopy.html">PolygonCopy</fn> function duplicates a polygon group.</p>
<p>The polygon group to copy is pointed to by the argument <ar>src</ar>.</p>
</description>
<returns>Returns a pointer to the new polygon group on success. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>
<example type="rplot">PolygonCopy</example>
<example type="source">PolygonCopy.c</example>


</function>
<function>
<name>PolygonFree</name>
<location>src.lib/polygon</location>
<header>general/polygon.h</header>
<syntax>void PolygonFree(<sn href="structPolygonData.html">struct PolygonData</sn> *a);</syntax>
<description><p>The <fn href="PolygonFree.html">PolygonFree</fn> function frees the memory used to store a polygon group.</p>
<p>The polygon group is pointed to by the argument <ar>a</ar>.</p>
</description>
<example type="rplot">PolygonFree</example>
<example type="source">PolygonFree.c</example>

</function>
<function>
<name>PolygonMake</name>
<location>src.lib/polygon</location>
<header>general/polygon.h</header>
<syntax><sn href="structPolygonData.html">struct PolygonData</sn> *PolygonMake(int sze,int (*bbox)(void *x, void *y,int s));</syntax>
<description><p>The <fn href="PolygonMake.html">PolygonMake</fn> function creates a polygon group.</p>
<p>A polygon group can be defined in a coordinate system with an arbitrary number of dimensions, defined using any data type. The argument <ar>sze</ar> defines the number of bytes required to store a point. </p>
<p>The final argument <ar>bbox</ar>, is a pointer to a function of the form:</p> 
	
<fd>int bbox(void *x,void *y,int s);</fd>

<p>This function is called each time a new point is added to a polygon and its purpose is to calculate the bounding box of the polygon.</p> 
<p>The first argument <ar>x</ar> is a pointer to the point added to the polygon, while the second argument <ar>y</ar> is an array pointer consisting of two elements. The first defines the lower limits of the bounding box, while the second defines the upper limits. In the case of a two dimensional polygon the two elements would define the bottom left and top right hand co-ordinates of the bound box.</p>
<p>The final argument s defines the number of bytes required to store a point.</p>
</description>
<returns>Returns a pointer to the new polygon group on success. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>
<example type="rplot">PolygonMake</example>
<example type="source">PolygonMake.c</example>

</function>
<function>
<name>PolygonModify</name>
<location>src.lib/polygon</location>
<header>general/polygon.h</header>
<syntax>void PolygonModify(<sn href="structPolygonData.html">struct PolygonData</sn> *src, int (*trf)(int ssze,void *src,int dsze, void *dst,void *data),void *data);</syntax>
<description><p>The <fn href="PolygonModify.html">PolygonModify</fn> function modifies a set of polygons.</p>
<p>The argument <ar>src</ar> points to the polygon group.</p>
<p>The argument <ar>trnf</ar> is a pointer to a function of the form:</p>
<fd>int (*trnf) (int ssze,void *src,int dsze,void *dst,void *dptr);</fd>
<p>This function performs the modification of the points in the polygon group.</p>
<p>The size in bytes of the input coordinate is given be the argument <ar>ssze</ar>. The coordinate data is pointed to by the argument <ar>src</ar>. The first two elements stored in the coordinate data block are assumed to be single precision floating point numbers of type float that represent the actual coordinate.</p>
<p>The size in bytes of the output coordinate is given be the argument <ar>dsze</ar>. The coordinate data is pointed to by the argument <ar>dst</ar>. The first two elements stored in the coordinate data block are assumed to be single precision floating point numbers of type float that represent the actual coordinate.</p>
<p>The transformation should read the coordinate from <ar>src</ar>, modify it and write the value to <ar>dst</ar>.</p>
<p>The <ar>data</ar> argument of the  <fn href="PolygonModify.html">PolygonModify</fn> function is passed directly as the <ar>dptr</ar> argument and allows extra parameters to be passed to the function.</p>
<p>The function should return a zero if the modification was successfully applied or (-1) if an error occurred.</p>
</description>
<example type="rplot">PolygonModify</example>
<example type="source">PolygonModify.c</example>


</function>
<function>
<name>PolygonRead</name>
<location>src.lib/polygon</location>
<header>general/polygon.h</header>
<syntax>void *PolygonRead(<sn href="structPolygonData.html">struct PolygonData</sn> *ptr,int n,int o);</syntax>
<description><p>The <fn href="PolygonRead.html">PolygonRead</fn> function reads the coordinates of a vertex of a polygon.</p>
<p>The argument <ar>ptr</ar> points to the polygon group. The index of the polygon within the group is given by the argument <ar>n</ar> and the vertex number by the argument <ar>o</ar>.</p>
</description>
<returns>Returns a pointer to the vertex. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>
<example type="rplot">PolygonRead</example>
<example type="source">PolygonRead.c</example>


</function>
<function>
<name>PolygonReadOp</name>
<location>src.lib/polygon</location>
<header>general/polygon.h</header>
<syntax>int PolygonReadOp(<sn href="structPolygonData.html">struct PolygonData</sn> *ptr,int n,int o);</syntax>
<description><p>The <fn href="PolygonReadOp.html">PolygonReadOp</fn> function reads the drawing operation for a vertex of a polygon.</p>
<p>The argument <ar>ptr</ar> points to the polygon group. The index of the polygon within the group is given by the argument <ar>n</ar> and the vertex number by the argument <ar>o</ar>.</p>
</description>
<returns>Returns the drawing operation between this vertex and the preceding one. On error, (-1) is returned.</returns>
<errors>On error,  (-1) is returned.</errors>
<example type="rplot">PolygonReadOp</example>
<example type="source">PolygonReadOp.c</example>


</function>
<function>
<name>PolygonReadType</name>
<location>src.lib/polygon</location>
<header>general/polygon.h</header>
<syntax>int PolygonReadType(<sn href="structPolygonData.html">struct PolygonData</sn> *ptr,int n);</syntax>
<description><p>The <fn href="PolygonReadType.html">PolygonReadType</fn> function reads the type of a polygon.</p>
<p>The argument <ar>ptr</ar> points to the polygon group. The index of the polygon within the group is given by the argument <ar>n</ar>.</p>
</description>
<returns>Returns the polygon type. On error, (-1) is returned.</returns>
<errors>On error,  (-1) is returned.</errors>
<example type="rplot">PolygonReadType</example>
<example type="source">PolygonReadType.c</example>



</function>
<function>
<name>PolygonRemove</name>
<location>src.lib/polygon</location>
<header>general/polygon.h</header>
<syntax>int PolygonRemove(<sn href="structPolygonData.html">struct PolygonData</sn> *a);</syntax>
<description><p>The <fn href="PolygonRemove.html">PolygonRemove</fn> function removes the last polygon from a group.</p>
<p>The argument <ar>ptr</ar> points to the polygon group.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error,  (-1) is returned.</errors>
<example type="rplot">PolygonRemove</example>
<example type="source">PolygonRemove.c</example>


</function>
<function>
<name>PolygonTransform</name>
<location>src.lib/polygon</location>
<header>general/polygon.h</header>
<syntax><sn href="structPolygonData.html">struct PolygonData</sn> *PolygonTransform(<sn href="structPolygonData.html">struct PolygonData</sn> *src, int sze, int (*bbox)(void *x,void *y,int s), int (*trf)(int ssze,void *src,int dsze, void *dst,void *data), void *data);</syntax>

<description><p>The <fn href="PolygonTransform.html">PolygonTransform</fn> function transforms a set of polygons.</p>
<p>The argument <ar>src</ar> points to the polygon group.</p>
<p>The argument <ar>sze</ar> defines the number of bytes required to store a point in the transformed polygon group.</p>
<p>The argument <ar>bbox</ar> is a pointer to a function of the form:</p> 
	
<fd>int bbox(void *x,void *y,int s);</fd>

<p>This function is called each time a new point is added to a polygon and its purpose is to calculate the bounding box of the polygon.</p> 
<p>The first argument <ar>x</ar> is a pointer to the point added to the polygon, while the second argument <ar>y</ar> is an array pointer consisting of two elements. The first defines the lower limits of the bounding box, while the second defines the upper limits. In the case of a two dimensional polygon the two elements would define the bottom left and top right hand co-ordinates of the bound box.</p>
<p>The final argument s defines the number of bytes required to store a point.</p>
<p>The argument <ar>trnf</ar> is a pointer to a function of the form:</p>
<fd>int (*trnf) (int ssze,void *src,int dsze,void *dst,void *dptr);</fd>
<p>This function performs the modification of the points in the polygon group.</p>
<p>The size in bytes of the input coordinate is given be the argument <ar>ssze</ar>. The coordinate data is pointed to by the argument <ar>src</ar>. The first two elements stored in the coordinate data block are assumed to be single precision floating point numbers of type <code>float</code> that represent the actual coordinate.</p>
<p>The size in bytes of the output coordinate is given be the argument <ar>dsze</ar>. The coordinate data is pointed to by the argument <ar>dst</ar>. The first two elements stored in the coordinate data block are assumed to be single precision floating point numbers of type <code>float</code> that represent the actual coordinate.</p>
<p>The transformation should read the coordinate from <ar>src</ar>, modify it and write the value to <ar>dst</ar>.</p>
<p>The <ar>data</ar> argument of the  <fn href="PolygonTransform.html">PolygonTransform</fn> function is passed directly as the <ar>dptr</ar> argument and allows extra parameters to be passed to the function.</p>
<p>The function should return a zero if the transformation was successfully applied or (-1) if an error occurred.</p>
</description>
<returns>Returns a pointer to the new polygon group on success. On error, a <code>NULL</code> pointer is returned.</returns>
<errors>On error, a <code>NULL</code> pointer is returned.</errors>
<example type="rplot">PolygonTransform</example>
<example type="source">PolygonTransform.c</example>



</function>
<function>
<name>PolygonXYbbox</name>
<location>src.lib/polygon</location>
<header>general/polygon.h</header>
<syntax>int PolygonXYbbox(void *a,void *b,int s);</syntax>
<description><p>The <fn href="PolygonXYbbox.html">PolygonXYbbox</fn> function calculates the bounding box of a 2-dimensional cartesian polygon.</p>
<p>The argument <ar>a</ar> points to the polygon coordinate being tested. If <ar>a</ar> is a <code>NULL</code> pointer then the bounding box should be reset. The first two elements pointed to by <ar>a</ar> are assumed to be single precision floating point numbers of type <code>float</code> that represent the cartesian coordinates of the point.</p>
<p>The argument <ar>b</ar> is assumed to be an array of single precision floating point numbers of type <ar>float</ar>, used to store the bounding box.</p>
<p>The final argument <ar>s</ar> indicates the size in bytes of each point.</p>
</description>
<returns>Returns zero on success. On error, (-1) is returned.</returns>
<errors>On error,  (-1) is returned.</errors>
<example type="rplot">PolygonXYbbox</example>
<example type="source">PolygonXYbbox.c</example>

</function>

<structure>
 <name>PolygonData</name>
 <location>src.lib/polygon</location>
 <header>general/polygon.h</header>
 <struct>
   <member>
     <proto>int polnum;</proto>
     <description>Number of polygons in the group.</description>
   </member>
   <member>
     <proto>int pntnum;</proto>
     <description>Number of points (vertices) in the group.</description>
   </member>
   <member>
     <proto>int *num;</proto>
     <description>Number of vertices for each individual polygon.</description>
   </member>
   <member>
     <proto>int *off;</proto>
     <description>Offsets into the point table for the start of each polygon.</description>
   </member>
   <member>
     <proto>int *type;</proto>
     <description>Type protos for each polygon.</description>
   </member>
   <member>
     <proto>int sze;</proto>
     <description>Number of bytes required to store a single point in a polygon.</description>
   </member>
   <member>
     <proto>int *op;</proto>
     <description>Plot operations table for each point.</description>
   </member>
   <member>
     <proto>void *data;</proto>
     <description>Point table.</description>
   </member>
   <member>
     <proto>int *box;</proto>
     <description>Bounding box for each polygon.</description>
   </member>
   <member>
     <proto>int *(bbox)(void *a,void *b,int s);</proto>
     <description>Function called to evaluate the bounding box for each polygon.</description>
   </member>
 </struct>
</structure>
</library>
